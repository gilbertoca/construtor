<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
    
    <!-- If the necessity arises you can create another spring-[context].xml file:
        spring-security.xml, spring-services.xml, etc.
    -->
    
    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <!-- (in this case, JDBC-related settings for the dataSource definition below) -->

    <!-- DataSource configuration for Apache Commons DBCP. -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- Connection Pooling DBCP -->
        <!--property name="initialSize" value="5"/>
        <property name="maxActive" value="100" />
        <property name="maxIdle" value="30" />
        <property name="maxWait" value="1000" />
        <property name="poolPreparedStatements" value="true" />
        <property name="defaultAutoCommit" value="false" /-->
    </bean>
	
    <!-- JNDI DataSource for JEE environments -->
    <!--
    <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/modulo"/>
    -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml"/>        
        <!-- 
        //FIXME: How to use spring to weaving our classes?
        we enabled static weaving in a Maven. We have to add the Eclipselink weaver 
        in the process-classes phase of the Mavenâ€™s build life cycle. 
        The process-classes phase happens after the compile phase and allows 
        the post-processing of files generated in compile phase.         
        <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
        </property>
        -->
    </bean>

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    
    <!-- Spring Data JPA-->
    <jpa:repositories base-package="com.googlecode.construtor.modulo.repository" />

    <!-- Spring Service-->
    <!-- THIS ONE IS ACTIVATE BY component-scan
    <context:annotation-config/>    -->
    
    <context:component-scan base-package="com.googlecode.construtor.modulo.service" />
    
    <!-- Spring JSF application -->
    <context:component-scan base-package="com.googlecode.construtor.modulo.view" />
    
        
</beans>